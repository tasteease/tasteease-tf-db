name: "Terraform Plan"

on:
  pull_request:

env:
  TF_CLOUD_ORGANIZATION: "tasteease"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "tasteease-tf"
  CONFIG_DIRECTORY: "./"

jobs:
  checkout:
    name: "Checkout"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

  upload_configuration:
    name: "Upload Configuration"
    runs-on: ubuntu-latest

    needs: checkout

    steps:
      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

  create_plan_run:
    name: "Create Plan Run"
    runs-on: ubuntu-latest

    needs: upload_configuration

    steps:
      - name: Prints Configuration Version ID
        run: |
          echo "Configuration Version ID: ${{ needs.plan-upload.outputs.configuration-version-id }}"

  get_plan_output:
    name: "Get Plan Output"
    runs-on: ubuntu-latest

    needs: create_plan_run

    steps:
      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(needs.create_plan_run.outputs.payload).data.relationships.plan.data.id }}

  update_pr:
    name: "Update PR"
    runs-on: ubuntu-latest

    needs: get_plan_output

    steps:
      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
               \`\`\`
               Plan: ${{ needs.get_plan_output.outputs.add }} to add, ${{ needs.get_plan_output.outputs.change }} to change, ${{ needs.get_plan_output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ needs.create_plan_run.outputs.run_link }})
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
